import groovy.json.JsonSlurper

//Custom Variables
def APP_NAME = 'device-uptime-monitoring';
def GIT_HUB_REPO_NAME = 'https://github.com/Kaivalya461/' + APP_NAME + '.git';
def DOCKER_IMG_NAME = 'kaivalya461/' + APP_NAME;

def portainerDeployment(def stackName) {
    def accessToken = getAccessToken(
                        'https://portainer.kvhome.in/api/auth',
                        PORT_CREDS_USR,
                        PORT_CREDS_PSW
                        ).jwt;

    createStackUsingRepository(
        accessToken,
        stackName,
        'https://github.com/Kaivalya461/kubernetes-yamls',
        'refs/heads/master',
        'Device-Uptime-Monitoring/deploy.yaml'
    );
}

def redployPortainerStack(def stackName) {
    def accessToken = getAccessToken(
                        'https://portainer.kvhome.in/api/auth',
                        PORT_CREDS_USR,
                        PORT_CREDS_PSW
                        ).jwt;

    //Redploy() - WIP
}

@Library("my-shared-library") _

pipeline {
    environment {
        imagename = "${DOCKER_IMG_NAME}"
        dockerImage = ''
        PORT_CREDS = credentials('portainer-app-user')
    }

    agent any

    parameters {
        choice(name: 'DEPLOY_OPTIONS', choices: ['redploy', 'create_new_manifest'], description: 'Choose one of them...')
    }
  
    stages {
        stage ('Create New Portainer Stack') {
            when {
                expression {env.DEPLOY_OPTIONS == 'create_new_manifest'}
            }
            steps {
                echo 'Portainer Create Stack..'

                script {
                    portainerDeployment(APP_NAME);
                }
            }
        }

        stage ('Redeploy Portainer Stack') {
              when {
                  expression {env.DEPLOY_OPTIONS == 'redploy'}
              }
              steps {
                  echo 'Portainer Create Stack..'

                  script {
                      redployPortainerStack(APP_NAME);
                  }
              }
          }
    }
}
